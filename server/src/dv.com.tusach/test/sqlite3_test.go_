package test

import (
	"database/sql"
	"fmt"
	"os"
	"runtime"
	"testing"

	"dv.com.tusach/logger"
	"dv.com.tusach/util"
	_ "github.com/mattn/go-sqlite3"
)

func testSqlite3(t *testing.T) {
	os.Remove(util.GetConfiguration().DBFilename)

	logger.Info("opening database...")
	db, err := sql.Open("sqlite3", util.GetConfiguration().DBFilename)
	if err != nil {
		t.Errorf("failed to open databse foo.db.", err)
	}
	//defer db.Close()
	defer func() {
		if err := recover(); err != nil {
			db.Close()
			logger.Infof("Recover from panic: %s\n", err)
			trace := make([]byte, 1024)
			count := runtime.Stack(trace, true)
			logger.Infof("Stack of %d bytes: %s\n", count, trace)
		}
	}()

	logger.Info("creating table foo...")
	stmt := `
		create table foo (id integer not null primary key, name text); 
		delete from foo;
	`
	_, err = db.Exec(stmt)
	if err != nil {
		t.Errorf("failed to create table foo.", err)
	}

	logger.Info("start transaction...")
	tx, err := db.Begin()
	if err != nil {
		t.Errorf("failed to start transaction.", err)
	}
	pstmt, err := tx.Prepare("insert into foo(id, name) values(?,?)")
	if err != nil {
		t.Errorf("failed to prepare statement.", err)
	}
	defer pstmt.Close()
	logger.Info("executing inserts...")
	for i := 0; i < 100; i++ {
		_, err = pstmt.Exec(i, fmt.Sprintf("Hello%03d", i))
		if err != nil {
			t.Errorf("failed to execute statement.", err)
		}
	}
	logger.Info("end transaction...")
	tx.Commit()

	rows, err := db.Query("select id, name from foo")
	if err != nil {
		t.Errorf("failed to query select.", err)
	}
	defer rows.Close()
	for rows.Next() {
		var id int
		var name string
		rows.Scan(&id, &name)
		logger.Infof("found row: %d, %s\n", id, name)
	}
	rows.Close()

	pstmt, err = db.Prepare("select name from foo where id = ?")
	if err != nil {
		t.Errorf("failed to prepare statement.", err)
	}
	defer pstmt.Close()

}
